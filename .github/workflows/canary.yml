name: Publish package

on:
  workflow_run:
    workflows: ["Continuous integration"]
    types:
      - completed

jobs:
  publish-canary:
    name: Publish canary
    runs-on: ubuntu-latest

    if: github.event.workflow_run.head_branch != 'master'

    steps:
    - name: Download artifact
      id: download-artifact
      uses: actions/github-script@v3.1.0
      with:
        script: |
          const artifacts = await github.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: ${{ github.event.workflow_run.id }},
          });

          const matchArtifact = artifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "package"
          })[0];

          const download = await github.actions.downloadArtifact({
             owner: context.repo.owner,
             repo: context.repo.repo,
             artifact_id: matchArtifact.id,
             archive_format: 'zip',
          });

          console.log("::set-output name=id::${matchArtifact.id}")

          const fs = require('fs');
          fs.writeFileSync('${{github.workspace}}/package.zip', Buffer.from(download.data));

    - name: Unzip artifact
      run: |
        unzip package.zip
        tar -xzf package.tgz

        ls -all

    - name: Extract metadata
      id: compute-version
      run: |
        VERSION=$(cat package/package.json | jq -r '.version')
        NAME=$(cat pacakge/package.json | jq -r '.name')

        echo "::set-output name=version::$VERSION"
        echo "::set-output name=name::$NAME"

    - name: Create deployment
      id: deployment
      uses: actions/github-script@v3
      env:
        NAME: ${{ steps.compute-version.outputs.name }}
        VERSION: ${{ steps.compute-version.outputs.version }}
        ARTIFACT_ID: ${{ steps.download-artifact.outputs.id }}
      with:
        github-token: ${{ secrets.TOKEN_REPO_WRITE }}
        previews: 'ant-man-preview,flash-preview'
        script: |
          const name = process.env.NAME;
          const version = process.env.VERSION;

          const branch = '${{ github.event.workflow_run.head_branch }}';

          const { data: deployment } = await github.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: branch,
            environment: 'npm',
            auto_merge: false,
            required_contexts: [],
            payload: {
              version,
              name,
              artifact_id: process.env.ARTIFACT_ID,
              npmTag: branch,
            },
            description: `Publish ${name}@${version} on npm`,
            production_environment: true,
          });
