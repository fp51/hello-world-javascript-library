name: Pull request labels

on:
  pull_request_target:
    types: [labeled, unlabeled, synchronize]

jobs:
  version-labels:
    name: 'check version label'
    runs-on: ubuntu-latest

    steps:
    - name: Check if version label is present
      uses: actions/github-script@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const versionLabels = [
            'Action: no bump',
            'Action: beta bump',
            'Action: patch bump',
            'Action: minor bump',
            'Action: major bump',
          ];

          const { data: labels } = await github.issues.listLabelsOnIssue({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            per_page: 100,
          });

          const versionLabelsPresent = labels
            .filter(label => versionLabels.includes(label.name))

          if (versionLabelsPresent.length === 1) {
            return;
          }

          console.log(`::debug ::${versionLabelsPresent.length} matching labels`);

          throw new Error(`Should have one and only one of ${versionLabels.join(', ')} labels`);

    - name: 'Activate auto-merge'
      uses: actions/github-script@v3
      with:
        github-token: "${{ secrets.TOKEN_REPO_WRITE }}"
        script: |
            const findPullRequestQuery = `
              query findPullRequest($owner: String!, $repo: String!, $number: Int!) {
                repository(owner: $owner, name: $repo) {
                  pullRequest(number: $number) {
                    id
                  }
                }
              }
            `

            const result = await github.graphql(findPullRequestQuery, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              number: context.payload.pull_request.number,
            })

            console.log({ result })

            const {
              repository: {
                pullRequest: {
                  id: pullRequestId
                }
              }
            } = findPullRequest


            const query = `
              mutation enableAutoMerge($id: String!) {
                enablePullRequestAutoMerge(input: { pullRequestId: $id }) {
                  pullRequest {
                    id
                  }
                }
            }`;

            await github.graphql(query, {
              id: pullRequestId
            })
